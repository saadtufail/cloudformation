---
Description: Create an Amazon Linux server running nginx web server
 
Parameters:
    KeyName:
        Type: AWS::EC2::KeyPair::KeyName
        Description: Name of an existing EC2 keypair to enable SSH access to the instance
    
    InstanceType:
        Description: AWS EC2 instance type
        Type: String
        Default: t2.large
        AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
          t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
          m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
          m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
          c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
          g3.8xlarge,
          r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
          i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
          d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
        ConstraintDescription: must be a valid EC2 instance type.
    
    homePath:
        Description: EC2 Instance home path 
        Type: String
        Default: /home/ec2-user/
    
    distFolder:
        Description: Folder to hold the UI files in EC2. 
        Type: String
        Default: s3_dist
    
    sourceBucket:
        Description: Name of s3 bucket from where you want to pull the data
        Type: String
        Default: ai-dashboard-bucket
    
    zipfileName:
        Description: Name of UI zip folder.
        Type: String
        Default: dist.zip
    
    ExtractedFolderName:
        Description: Name of the zip folder after extracting.
        Type: String
        Default: dist
    
    destinationFolder:
        Description: EC2 Destination path
        Type: String
        Default: /home/ec2-user/

    nginxPath:
        Description: Path of Nginx Directory
        Type: String
        Default: /usr/share/nginx/html/
    
    EnvironmentName:
        Description: An environment name that is prefixed to resource names
        Type: String
        Default: Production

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.192.0.0/16

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.192.10.0/24
      
    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.192.11.0/24
  
    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.192.20.0/24

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.192.21.0/24

Mappings:
    Region2AMI:
     #  This is the Amazon Linux 2 AMI.
        us-east-1:
            AMI: ami-00514a528eadbc95b
        us-east-2: 
            AMI: ami-04fcd96153cb57194
        us-west-1:
            AMI: ami-023e0c35fc414e78b
        us-west-2:
            AMI: ami-0528a5175983e7f28
            
Resources: 
    EC2Instance:
        Type: AWS::EC2::Instance
        Metadata:
            AWS::CloudFormation::Init:
                configSets:
                    InstallAndConfig:
                        - Install
                Install:
                    files:
                        /etc/cfn/cfn-hup.conf:
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}
                                interval=1
                        mode: '000400'
                        owner: root
                        group: root
                        
                        /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.Amazon Linux w/ nginx included.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region} --configsets InstallAndConfig
                                runas=root
                        mode: '00400'
                        owner: root
                        group: root
                    
                    services:
                        sysvinit:
                            cfn-hup:
                                enabled: 'true'
                                ensureRunning: 'true'
                                files:
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        
        Properties:
            UserData: !Base64
            #  Fn::Join:
            #  - ''
            #  - [IPAddress=, !Ref 'MyEIP']
            IamInstanceProfile: !Ref 'ListS3BucketsInstanceProfile'
            ImageId: !FindInMap [Region2AMI, !Ref 'AWS::Region', 'AMI']
            InstanceType: !Ref 'InstanceType'
            SecurityGroups: 
            - !Ref NginxWebserverSecurityGroup
            Tags:
            - Key: Name
              Value: Amazon Linux w/ nginx and s3. 
            KeyName: !Ref KeyName  
            UserData:
                'Fn::Base64':
                  !Sub |
                    #!/bin/bash -x
                    yum update -y aws-cfn-bootstrap
                    sudo yum update -y
                    sudo yum install git -y
                    sudo yum install nginx -y
                    sudo service nginx enable
                    sudo service nginx start
                    cd ${homePath}
                    mkdir ${distFolder}
                    aws s3 cp s3://${sourceBucket}/${zipfileName} ${destinationFolder}
                    cd ${homePath}/${distFolder}
                    cp ../${zipfileName} /${homePath}/${distFolder}
                    unzip ${zipfileName}
                    cd ${nginxPath}
                    rm -rf *
                    cp -R /${homePath}/${distFolder}/${ExtractedFolderName} ${nginxPath}
                    cd /${nginxPath}/${ExtractedFolderName}/
                    mv * ../
                    sudo service nginx restart
                    sudo chkconfig nginx on
                    /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}  --configsets InstallAndConfig

    ListS3BucketsInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties: 
            Path: /
            Roles: 
              -  !Ref 'ListS3BucketsRole'

    ListS3BucketsPolicy:
        Type: AWS::IAM::Policy
        Properties: 
            PolicyName: ListS3BucketsPolicy
            PolicyDocument: 
                Statement:
                    Effect: Allow
                    Action: [s3:Get*, s3:List*]
                    Resource: '*'
            Roles:
              -  !Ref 'ListS3BucketsRole'

    ListS3BucketsRole:
        Type: AWS::IAM::Role
        Properties: 
            AssumeRolePolicyDocument:
                Statement: 
                    Effect: Allow
                    Principal:
                        Service: ec2.amazonaws.com
                    Action: sts:AssumeRole
            Path: /

    NginxWebserverSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allows HTTP,SSH Access from anywhere.
            SecurityGroupIngress:
            - CidrIp: !Ref VpcCIDR
              FromPort: 80
              ToPort: 80
              IpProtocol: tcp
            - CidrIp: !Ref VpcCIDR
              FromPort: 22
              ToPort: 22
              IpProtocol: tcp
            - CidrIp: !Ref VpcCIDR
              FromPort: 443
              ToPort: 443
              IpProtocol: tcp
    #MyEIP:
    #    Type: AWS::EC2::EIP  
    #
    #MyEIPAssociation:
    #    Type: AWS::EC2::EIPAssociation
    #    Properties:
    #        InstanceId: !Ref EC2Instance
    #        EIP: !Ref MyEIP
    
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName
    
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
              - Key: Name
                Value: !Ref EnvironmentName
    
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC
    
    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
    
    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs  '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs  '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
    
    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs  '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
          Domain: vpc
          InstanceId: !Ref EC2Instance

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
          Domain: vpc

    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway2EIP.AllocationId
        SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref PrivateRouteTable1
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PrivateRouteTable1
          SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref PrivateRouteTable2
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PrivateRouteTable2
          SubnetId: !Ref PrivateSubnet2 
    NoIngressSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupName: "no-ingress-sg"
          GroupDescription: "Security group with no ingress rule"
          VpcId: !Ref VPC

Outputs:
    InstanceId: 
        Description: InstanceId of the newly created EC2 instance
        Value: !Ref EC2Instance
    
    #InstanceId: 
    #    Description: IP address of the newly created EC2 instance
    #    Value: !Ref MyEIP

    WebURL:     
        Description: URL for web page
        Value: !Sub 'http://${EC2Instance.PublicIp}'
    
    VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC
    
    NatGateway1EIP:
        Description: NatGateway1EIP
        Value: !Ref NatGateway1EIP

    NatGateway2EIP:
        Description: NatGateway2EIP
        Value: !Ref NatGateway2EIP
            

    PublicSubnets:
         Description: A list of the public subnets
         Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet1

    PublicSubnet2:
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref PublicSubnet2

    PrivateSubnet1:
        Description: A reference to the private subnet in the 1st Availability Zone
        Value: !Ref PrivateSubnet1

    PrivateSubnet2:
        Description: A reference to the private subnet in the 2nd Availability Zone
        Value: !Ref PrivateSubnet2

    NoIngressSecurityGroup:
        Description: Security group with no ingress rule
        Value: !Ref NoIngressSecurityGroup